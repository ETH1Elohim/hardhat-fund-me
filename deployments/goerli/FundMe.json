{
    "address": "0x1275226691Bf04128c1F9B4C9A31F74F8175699d",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xcaf6aa69817658afae956888bd649ca965d285837a3d51b0f68ececb0976212a",
    "receipt": {
        "to": null,
        "from": "0xf9A7E0AC7A1a6048B92E93c91e2450fCD3Ed12F6",
        "contractAddress": "0x1275226691Bf04128c1F9B4C9A31F74F8175699d",
        "transactionIndex": 21,
        "gasUsed": "1025992",
        "logsBloom": "0x
        "blockHash": "0x1b5514870bec051c115228c821393325104939cc5356629852566e06eb88e992",
        "transactionHash": "0xcaf6aa69817658afae956888bd649ca965d285837a3d51b0f68ececb0976212a",
        "logs": [],
        "blockNumber": 8295139,
        "cumulativeGasUsed": "4791600",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
    "numDeployments": 2,
    "solcInputHash": "1c510a2a23799dec9fa9c87e008257d4",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ETH1Elohim\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma\\npragma solidity ^0.8.0;\\n// imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// error codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd funding\\n * @author ETH1Elohim\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables!\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    // paramater -> priceFeedAddress & passing in with constructor -> saved as global variable to AggregatorV3Interface\\n    // then passing to getConversionRate function in PriceConverter.sol -> which passes to getPrice function -> which then calls latestRoundData()\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    //// Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    // functions\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        // read from memory vs. read from storage\\n        address[] memory funders = s_funders;\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n    \\n}\\n\",\"keccak256\":\"0xdedb10c357fb8038d1ba221f7c719ea09f85978f45a9fc627477a8489f5d5fff\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// in local code tell hardhat where to get this from: yarn add --dev @chainlink/contracts\\n\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount, AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x67b31f5927c12a45b9a5899a383a4a1d3ff4dfe0696f72c5deab7850d4c3a7fc\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012b7380380620012b78339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61113162000186600039600081816101f00152818161043f015281816105c901526107bf01526111316000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a89565b6101a6565b6040516100b49190610c7f565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610c7f565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610c09565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610c24565b60405180910390f35b61015d61048d565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ab6565b610855565b60405161019d9190610c09565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610fe7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610f40565b915050610276565b50600067ffffffffffffffff81111561033a57610339611016565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e929190610979565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610bf4565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610c3f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055b9190610cb6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610686575b5050505050905060005b815181101561075a5760008282815181106106f8576106f7610fe7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610f40565b9150506106da565b50600067ffffffffffffffff81111561077657610775611016565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600190805190602001906107ba929190610979565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610bf4565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b60006001828154811061086b5761086a610fe7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610e54565b6108cc9190610d0c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190610ae3565b5050509150506402540be400816109719190610d3d565b915050919050565b8280548282559060005260206000209081019282156109f2579160200282015b828111156109f15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610999565b5b5090506109ff9190610a03565b5090565b5b80821115610a1c576000816000905550600101610a04565b5090565b600081359050610a2f8161109f565b92915050565b600081519050610a44816110b6565b92915050565b600081359050610a59816110cd565b92915050565b600081519050610a6e816110cd565b92915050565b600081519050610a83816110e4565b92915050565b600060208284031215610a9f57610a9e611045565b5b6000610aad84828501610a20565b91505092915050565b600060208284031215610acc57610acb611045565b5b6000610ada84828501610a4a565b91505092915050565b600080600080600060a08688031215610aff57610afe611045565b5b6000610b0d88828901610a74565b9550506020610b1e88828901610a35565b9450506040610b2f88828901610a5f565b9350506060610b4088828901610a5f565b9250506080610b5188828901610a74565b9150509295509295909350565b610b6781610eae565b82525050565b610b7681610f0a565b82525050565b6000610b89600b83610ca5565b9150610b948261104a565b602082019050919050565b6000610bac601b83610ca5565b9150610bb782611073565b602082019050919050565b6000610bcf600083610c9a565b9150610bda8261109c565b600082019050919050565b610bee81610eea565b82525050565b6000610bff82610bc2565b9150819050919050565b6000602082019050610c1e6000830184610b5e565b92915050565b6000602082019050610c396000830184610b6d565b92915050565b60006020820190508181036000830152610c5881610b7c565b9050919050565b60006020820190508181036000830152610c7881610b9f565b9050919050565b6000602082019050610c946000830184610be5565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cc182610eea565b9150610ccc83610eea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0157610d00610f89565b5b828201905092915050565b6000610d1782610eea565b9150610d2283610eea565b925082610d3257610d31610fb8565b5b828204905092915050565b6000610d4882610ec0565b9150610d5383610ec0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9257610d91610f89565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dcf57610dce610f89565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0c57610e0b610f89565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4957610e48610f89565b5b828202905092915050565b6000610e5f82610eea565b9150610e6a83610eea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea357610ea2610f89565b5b828202905092915050565b6000610eb982610eca565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f1582610f1c565b9050919050565b6000610f2782610f2e565b9050919050565b6000610f3982610eca565b9050919050565b6000610f4b82610eea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7e57610f7d610f89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110a881610eae565b81146110b357600080fd5b50565b6110bf81610ec0565b81146110ca57600080fd5b50565b6110d681610eea565b81146110e157600080fd5b50565b6110ed81610ef4565b81146110f857600080fd5b5056fea2646970667358221220295f356e0a663fdb0faa7144cd536b3981588dd4de217a8e06a28f3710b8b9e764736f6c63430008070033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a89565b6101a6565b6040516100b49190610c7f565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610c7f565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610c09565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610c24565b60405180910390f35b61015d61048d565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ab6565b610855565b60405161019d9190610c09565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610fe7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610f40565b915050610276565b50600067ffffffffffffffff81111561033a57610339611016565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e929190610979565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610bf4565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610c3f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055b9190610cb6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610686575b5050505050905060005b815181101561075a5760008282815181106106f8576106f7610fe7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610f40565b9150506106da565b50600067ffffffffffffffff81111561077657610775611016565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600190805190602001906107ba929190610979565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610bf4565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b60006001828154811061086b5761086a610fe7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610e54565b6108cc9190610d0c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190610ae3565b5050509150506402540be400816109719190610d3d565b915050919050565b8280548282559060005260206000209081019282156109f2579160200282015b828111156109f15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610999565b5b5090506109ff9190610a03565b5090565b5b80821115610a1c576000816000905550600101610a04565b5090565b600081359050610a2f8161109f565b92915050565b600081519050610a44816110b6565b92915050565b600081359050610a59816110cd565b92915050565b600081519050610a6e816110cd565b92915050565b600081519050610a83816110e4565b92915050565b600060208284031215610a9f57610a9e611045565b5b6000610aad84828501610a20565b91505092915050565b600060208284031215610acc57610acb611045565b5b6000610ada84828501610a4a565b91505092915050565b600080600080600060a08688031215610aff57610afe611045565b5b6000610b0d88828901610a74565b9550506020610b1e88828901610a35565b9450506040610b2f88828901610a5f565b9350506060610b4088828901610a5f565b9250506080610b5188828901610a74565b9150509295509295909350565b610b6781610eae565b82525050565b610b7681610f0a565b82525050565b6000610b89600b83610ca5565b9150610b948261104a565b602082019050919050565b6000610bac601b83610ca5565b9150610bb782611073565b602082019050919050565b6000610bcf600083610c9a565b9150610bda8261109c565b600082019050919050565b610bee81610eea565b82525050565b6000610bff82610bc2565b9150819050919050565b6000602082019050610c1e6000830184610b5e565b92915050565b6000602082019050610c396000830184610b6d565b92915050565b60006020820190508181036000830152610c5881610b7c565b9050919050565b60006020820190508181036000830152610c7881610b9f565b9050919050565b6000602082019050610c946000830184610be5565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cc182610eea565b9150610ccc83610eea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0157610d00610f89565b5b828201905092915050565b6000610d1782610eea565b9150610d2283610eea565b925082610d3257610d31610fb8565b5b828204905092915050565b6000610d4882610ec0565b9150610d5383610ec0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9257610d91610f89565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dcf57610dce610f89565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0c57610e0b610f89565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4957610e48610f89565b5b828202905092915050565b6000610e5f82610eea565b9150610e6a83610eea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea357610ea2610f89565b5b828202905092915050565b6000610eb982610eca565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f1582610f1c565b9050919050565b6000610f2782610f2e565b9050919050565b6000610f3982610eca565b9050919050565b6000610f4b82610eea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7e57610f7d610f89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110a881610eae565b81146110b357600080fd5b50565b6110bf81610ec0565b81146110ca57600080fd5b50565b6110d681610eea565b81146110e157600080fd5b50565b6110ed81610ef4565b81146110f857600080fd5b5056fea2646970667358221220295f356e0a663fdb0faa7144cd536b3981588dd4de217a8e06a28f3710b8b9e764736f6c63430008070033",
    "devdoc": {
        "author": "ETH1Elohim",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
